#!/usr/bin/env ruby
# encoding: utf-8

# PROGRAM INFO {{{1
# Name:       AstroPanel
# Language:   Pure Ruby, best viewed in VIM
# Author:     Geir Isene <g@isene.com>
# Web_site:   http://isene.com/
# Github:     https://github.com/isene/AstroPanel
# License:    I release all copyright claims. This code is in the public domain.
#             Permission is granted to use, copy modify, distribute, and sell
#             this software for any purpose. I make no guarantee about the
#             suitability of this software for any purpose and I am not liable
#             for any damages resulting from its use. Further, I am under no
#             obligation to maintain or extend this software. It is provided 
#             on an 'as is' basis without any expressed or implied warranty.
# Version:    2.5: Bug fix

# LOAD MODULES {{{1
require 'io/console'
require 'shellwords'
require 'net/http'
require 'open-uri'
require 'timeout'
require 'json'
require 'date'
require 'time'
require 'rcurses'
include Rcurses
include Rcurses::Input
include Rcurses::Cursor

# BASIC SETUP {{{1
CONFIG_FILE = File.join(Dir.home, '.ap.conf')

# CLASS EXTENSIONS {{{1
class Numeric # {{{2
  def deg; self * Math::PI / 180; end
  def hms
    hrs = to_i
    m = ((self - hrs) * 60).abs
    [hrs, m.to_i, ((m - m.to_i) * 60).to_i.abs]
  end
  def to_hms
    h, m, s = hms
    "%02d:%02d:%02d" % [h, m, s]
  end
end

class String # {{{2
  def decoder
    gsub(/&#(\d+);/) { $1.to_i.chr(Encoding::UTF_8) }
  end
end


# EPHEMERIS CORE {{{1
class Ephemeris
  # Basics {{{2
  BODY_ORDER = %w[sun moon mercury venus mars jupiter saturn uranus neptune]

  attr_reader :sun, :moon, :mphase, :mph_s,
              :mercury, :venus, :mars, :jupiter, :saturn, :uranus, :neptune

  def initialize(date, lat, lon, tz) # {{{2
    @lat, @lon, @tz = lat, lon, tz
    y, mo, d = date.split('-').map(&:to_i)
    @d = 367*y - 7*(y + (mo+9)/12)/4 + 275*mo/9 + d - 730530
    @ecl = 23.4393 - 3.563E-7 * @d
    body_data

    # ----- Sun computing -----
    b = @body["sun"]
    w_s = (b["w"] % 360)
    m_s = (b["M"] % 360)
    es  = solve_kepler(m_s, b["e"])
    x   = Math.cos(es.deg) - b["e"]
    y   = Math.sin(es.deg) * Math.sqrt(1 - b["e"]**2)
    r   = Math.sqrt(x*x + y*y)
    tlon= (Math.atan2(y,x)*180/Math::PI + w_s) % 360
    @xs = r * Math.cos(tlon.deg)
    @ys = r * Math.sin(tlon.deg)
    xe  = @xs
    ye  = @ys * Math.cos(@ecl.deg)
    ze  = @ys * Math.sin(@ecl.deg)
    ra  = (Math.atan2(ye,xe)*180/Math::PI) % 360
    dec = Math.atan2(ze, Math.sqrt(xe*xe+ye*ye))*180/Math::PI
    @ra_s  = ra.round(4)
    @dec_s = dec.round(4)
    @ls    = (w_s + m_s) % 360
    gmst0  = ((@ls + 180)/15) % 24
    @sidtime = gmst0 + @lon/15

    @sun     = body_calc("sun")
    @moon    = body_calc("moon")
    @mphase, @mph_s = compute_moon_phase
    @mercury = body_calc("mercury")
    @venus   = body_calc("venus")
    @mars    = body_calc("mars")
    @jupiter = body_calc("jupiter")
    @saturn  = body_calc("saturn")
    @uranus  = body_calc("uranus")
    @neptune = body_calc("neptune")
  end

  def body_data # {{{2
    @body = {
      "sun"     => {"N"=>0.0, "i"=>0.0, "w"=>282.9404+4.70935e-5*@d, "a"=>1.0,     "e"=>0.016709-1.151e-9*@d,     "M"=>356.0470+0.98555*@d},
      "moon"    => {"N"=>125.1228-0.0529538083*@d, "i"=>5.1454, "w"=>318.0634+0.1643573223*@d, "a"=>60.2666, "e"=>0.0549,                   "M"=>115.3654+13.064886*@d},
      "mercury" => {"N"=>48.3313+3.24587e-5*@d,    "i"=>7.0047+5e-8*@d, "w"=>29.1241+1.01444e-5*@d, "a"=>0.387098, "e"=>0.205635+5.59e-10*@d, "M"=>168.6562+4.0923344368*@d},
      "venus"   => {"N"=>76.6799+2.46590e-5*@d,    "i"=>3.3946+2.75e-8*@d, "w"=>54.8910+1.38374e-5*@d, "a"=>0.72333,  "e"=>0.006773-1.302e-9*@d,     "M"=>48.0052+1.6021302244*@d},
      "mars"    => {"N"=>49.5574+2.11081e-5*@d,    "i"=>1.8497-1.78e-8*@d, "w"=>286.5016+2.92961e-5*@d, "a"=>1.523688, "e"=>0.093405+2.516e-9*@d,   "M"=>18.6021+0.52398*@d},
      "jupiter" => {"N"=>100.4542+2.76854e-5*@d,   "i"=>1.3030-1.557e-7*@d, "w"=>273.8777+1.64505e-5*@d,"a"=>5.20256,  "e"=>0.048498+4.469e-9*@d,     "M"=>19.8950+0.083052*@d},
      "saturn"  => {"N"=>113.6634+2.38980e-5*@d,   "i"=>2.4886-1.081e-7*@d, "w"=>339.3939+2.97661e-5*@d,"a"=>9.55475,  "e"=>0.055546-9.499e-9*@d,     "M"=>316.9670+0.03339*@d},
      "uranus"  => {"N"=>74.0005+1.3978e-5*@d,     "i"=>0.7733+1.9e-8*@d,  "w"=>96.6612+3.0565e-5*@d,   "a"=>19.18171-1.55e-8*@d,      "e"=>0.047318+7.45e-9*@d,     "M"=>142.5905+0.01168*@d},
      "neptune" => {"N"=>131.7806+3.0173e-5*@d,    "i"=>1.7700-2.55e-7*@d,  "w"=>272.8461-6.027e-6*@d,   "a"=>30.05826+3.313e-8*@d,     "e"=>0.008606+2.15e-9*@d,     "M"=>260.2471+0.005953*@d}
    }
  end

  def get_vars(body) # {{{2
    b = @body[body]
    [ b["N"], b["i"], b["w"], b["a"], b["e"], b["M"] ]
  end

  def alt_az(ra, dec, time_h) # {{{2
    # Convert RA/Dec and fractional hour to Alt/Az
    pi = Math::PI
    ha = (time_h - ra/15)*15
    x = Math.cos(ha.deg)*Math.cos(dec.deg)
    y = Math.sin(ha.deg)*Math.cos(dec.deg)
    z = Math.sin(dec.deg)
    xhor =  x*Math.sin(@lat.deg) - z*Math.cos(@lat.deg)
    yhor =  y
    zhor =  x*Math.cos(@lat.deg) + z*Math.sin(@lat.deg)
    az  = Math.atan2(yhor, xhor)*180/pi + 180
    alt = Math.asin(zhor)*180/pi
    [ alt, az ]
  end

  def rts(ra, dec, h) # {{{2
    # Calculate rise, transit, and set times for a given RA/Dec and horizon height h
    pi      = Math::PI
    # Calculate approximate transit time (in fractional hours UTC)
    transit = (ra - @ls - @lon)/15 + 12 + @tz
    transit = (transit + 24) % 24

    # Hour angle at altitude h
    cos_lha = (Math.sin(h.deg) - Math.sin(@lat.deg)*Math.sin(dec.deg)) /
              (Math.cos(@lat.deg)*Math.cos(dec.deg))

    if cos_lha < -1
      rise = "always"; set = "never"
    elsif cos_lha >  1
      rise = "never";  set = "always"
    else
      lha_h = Math.acos(cos_lha)*180/pi/15  # in hours
      rise = ((transit - lha_h + 24) % 24).to_hms
      set  = ((transit + lha_h + 24) % 24).to_hms
    end

    [ rise, transit.to_hms, set ]
  end

  def hms_dms(ra, dec) # {{{2
    # Convert RA (deg) & Dec (deg) into “HHh MMm” and “±DD° MM′” strings
    # RA → hours/minutes
    h, m, _ = (ra/15).hms
    ra_hms  = "%02dh %02dm" % [h, m]
    # Dec → degrees/minutes
    d, m2, _ = dec.hms
    dec_dms = "%+03d° %02d′" % [d, m2]
    [ra_hms, dec_dms]
  end

  def solve_kepler(m, e) # {{{2
    m %= 360
    e_anom = m + (180/Math::PI)*e*Math.sin(deg_to_rad(m))*(1+e*Math.cos(deg_to_rad(m)))
    loop do
      delta = e_anom - (e_anom - (180/Math::PI)*e*Math.sin(deg_to_rad(e_anom)) - m) / (1 - e*Math.cos(deg_to_rad(e_anom)))
      break if (delta - e_anom).abs < 0.0005
      e_anom = delta
    end
    e_anom
  end

  def deg_to_rad(d); d * Math::PI / 180; end # {{{2

  def body_calc(body) # {{{2
    pi      = Math::PI
    # get orbital elements
    n_b, i_b, w_b, a_b, e_b, m_b = get_vars(body)
    w_b = (w_b + 360) % 360
    m_b = m_b % 360

    # solve Kepler’s equation
    e1 = m_b + (180/pi) * e_b * Math.sin(m_b.deg) * (1 + e_b * Math.cos(m_b.deg))
    e0 = 0
    while (e1 - e0).abs > 0.0005
      e0 = e1
      e1 = e0 - (e0 - (180/pi)*e_b*Math.sin(e0.deg) - m_b) / (1 - e_b*Math.cos(e0.deg))
    end
    e = e1

    # position in orbital plane
    x = a_b * (Math.cos(e.deg) - e_b)
    y = a_b * Math.sqrt(1 - e_b*e_b) * Math.sin(e.deg)
    r = Math.sqrt(x*x + y*y)
    v = (Math.atan2(y, x)*180/pi + 360) % 360

    # ecliptic coordinates
    xeclip = r * (Math.cos(n_b.deg)*Math.cos((v+w_b).deg) - Math.sin(n_b.deg)*Math.sin((v+w_b).deg)*Math.cos(i_b.deg))
    yeclip = r * (Math.sin(n_b.deg)*Math.cos((v+w_b).deg) + Math.cos(n_b.deg)*Math.sin((v+w_b).deg)*Math.cos(i_b.deg))
    zeclip = r * Math.sin((v+w_b).deg) * Math.sin(i_b.deg)
    lon = (Math.atan2(yeclip, xeclip)*180/pi + 360) % 360
    lat = Math.atan2(zeclip, Math.sqrt(xeclip*xeclip + yeclip*yeclip))*180/pi
    r_b = Math.sqrt(xeclip*xeclip + yeclip*yeclip + zeclip*zeclip)

    # perturbations for Moon, Jupiter, Saturn, Uranus as in your original…

    # transform to equatorial coords
    xequat = xeclip
    yequat = yeclip * Math.cos(@ecl.deg) - zeclip * Math.sin(@ecl.deg)
    zequat = yeclip * Math.sin(@ecl.deg) + zeclip * Math.cos(@ecl.deg)
    ra = (Math.atan2(yequat, xequat)*180/pi + 360) % 360
    dec = Math.atan2(zequat, Math.sqrt(xequat*xequat + yequat*yequat))*180/pi

    # apply parallax if Moon…
    par = body == "moon" ? Math.asin(1/r_b)*180/pi : (8.794/3600)/r_b
    # topocentric corrections…
    # … all the rest of your code …

    # finally compute rise/transit/set:
    ri, tr, se = rts(ra, dec, (body=="sun" ? -0.833 : (body=="moon" ? -0.833 : 0)))

    # return array of [ra, dec, r_b, hms_dms..., ri, tr, se]
    [ra.round(4), dec.round(4), r_b.round(4), *hms_dms(ra,dec), ri, tr, se]
  end

  def compute_moon_phase # {{{2
    mp = 29.530588861
    nm = 2459198.177777778

    # Julian date for this ephemeris date (J2000.0 = 2451545.0)
    jd = 2451545.0 + @d

    # fraction of the lunar cycle [0…1)
    f = ((jd - nm) % mp) / mp.to_f
    phase_pct = (f * 100).round(1)

    name = case phase_pct
          when 0...2.5     then "New moon"
          when 2.5...27.5  then "Waxing crescent"
          when 27.5...32.5 then "First quarter"
          when 32.5...47.5 then "Waxing gibbous"
          when 47.5...52.5 then "Full moon"
          when 52.5...72.5 then "Waning gibbous"
          when 72.5...77.5 then "Last quarter"
          else                 "Waning crescent"
          end

    # true illumination % = (1 – cos(2πf)) / 2 × 100
    illum = ((1 - Math.cos(2 * Math::PI * f)) / 2 * 100).round(1)

    [ illum, name ]
  end

  def print # {{{2
    # helper: format the distance column
    def distf(d)
      int = d.to_i.to_s.rjust(2)
      f   = d % 1
      frc = "%.4f" % f
      int + frc[1..5]
    end

    # Header + separator in plain color
    header  = "Planet      │ RA      │ Dec      │ d=AU  │ Rise  │ Trans │ Set  \n"
    header << "────────────┼─────────┼──────────┼───────┼───────┼───────┼──────\n"

    # Build each planet‐line piecewise
    rows = Ephemeris::BODY_ORDER.map do |p|
      sym = AstroPanelApp::SYMBOLS[p]
      col = AstroPanelApp::BODY_COLORS[p]

      o      = body_calc(p)
      name   = "#{sym} #{p.capitalize}".ljust(11)
      ra_s   = o[3].ljust(7)
      dec_s  = o[4].ljust(7)
      d_o    = o[2].is_a?(Float) ? distf(o[2])[0..-3] : o[2]
      ris_o  = o[5][0..-4].rjust(5)
      tra_o  = o[6][0..-4].rjust(5)
      set_o  = o[7][0..-4].rjust(5)

      # Concatenate colored cells and plain separators
      [
        name.fg(col),
        "│",
        ra_s.fg(col),
        "│",
        dec_s.fg(col),
        "│",
        d_o.ljust(5).fg(col),
        "│",
        ris_o.fg(col),
        "│",
        tra_o.fg(col),
        "│",
        set_o.fg(col)
      ].join(" ")
    end

    header + rows.join("\n") + "\n"
  end

end

# MAIN APPLICATION {{{1
class AstroPanelApp
  # Basics {{{2
  HELP = <<~EOS

   Astropanel gives you essential data to plan your observations:
   * Weather forecast: Next 9 days with coloring (red/yellow/green) based
     on your limits for cloud cover, humidity, temperature and wind
   * Graphic representation of when the Sun, Moon and planets are visible
     with the Moon's phase showing in how light the representing bar is
   * Extra information for each day
   * Astronomical events for each of the 9 days, key 'e' lists them in one view
   * Star chart showing the selected day and time of day (for latitudes above +23)
   * A table showing RA, Dec, distance, rise, set and transit for the planets
   * Show today's Astronomy Picture Of the Day

   KEYS
   ? = Show this help text       ENTER = Refresh starchart/image
   l = Edit Location                 r = Redraw all panes and image
   a = Edit Latitude                 R = Refresh all data (and re-fetch image)
   o = Edit Longitude                s = Get starchart for selected time
   c = Edit Cloud limit              S = Open starchart in image program
   h = Edit Humidity limit           A = Show Astronomy Picture Of the Day
   t = Edit Temperature limit        e = Show upcoming events
   w = Edit Wind limit               W = Write to config file
   b = Edit Bortle value             q = Quit (write to config file, Q = no write)
  EOS

  include Rcurses
  include Rcurses::Cursor

  COND_GREEN  = '2ecc71'
  COND_YELLOW = 'f1c40f'
  COND_RED    = 'e74c3c'
  COND_COLORS = { 1 => COND_GREEN, 2 => COND_YELLOW, 3 => COND_RED }

  BODIES = %w[sun moon mercury venus mars jupiter saturn uranus neptune]
  SYMBOLS = {
    'sun'=>'☀','moon'=>'☾','mercury'=>'☿','venus'=>'♀',
    'mars'=>'♂','jupiter'=>'♃','saturn'=>'♄','uranus'=>'♅','neptune'=>'♆'
  }
  BODY_COLORS = {
    'sun'     => 'FFD700',  # Bright and radiant golden yellow
    'moon'    => '888888',  # Neutral gray, muted and cratered
    'mercury' => '8F6E54',  # Dusky brown-gray, rocky with a subtle metallic tone
    'venus'   => 'E6B07C',  # Soft peach-pink, warm and feminine
    'mars'    => 'BC2732',  # Bold, rusty red symbolizing iron oxide
    'jupiter' => 'C08040',  # Rich brown-orange, dynamic and banded
    'saturn'  => 'E8D9A0',  # Pale yellow-beige, soft and creamy
    'uranus'  => '80DFFF',  # Cool, icy blue with reduced glare
    'neptune' => '1E90FF'   # Deep, rich cobalt blue
  }

  def initialize # {{{2
    @weather, @planets, @events = [], {}, {}
    @index = 0
    setup_ui
    load_or_ask_config
    setup_image_display
    run_loop
  end

  def ask_config # {{{2
    # Prompt user for all config values via @footer (all required)
    # 1) Location (Cont/City) {{{3
    loop do
      input = @footer.ask("Location (Cont/City): ", "")
      if input =~ %r{\A\w+/\w+\z}
        @loc = input
        break
      else
        @footer.say("Must be like Europe/Oslo")
      end
    end

    # 2) Latitude {{{3
    loop do
      input = @footer.ask("Latitude (-90..90): ", "")
      if input.strip.empty?
        @footer.say("Latitude is required")
        next
      end
      val = input.to_f
      if (-90.0..90.0).include?(val)
        @lat = val
        break
      else
        @footer.say("Latitude must be between -90 and 90")
      end
    end

    # 3) Longitude {{{3
    loop do
      input = @footer.ask("Longitude (-180..180): ", "")
      if input.strip.empty?
        @footer.say("Longitude is required")
        next
      end
      val = input.to_f
      if (-180.0..180.0).include?(val)
        @lon = val
        break
      else
        @footer.say("Longitude must be between -180 and 180")
      end
    end

    # 4) Cloud coverage limit % {{{3
    loop do
      input = @footer.ask("Cloud coverage limit %: ", "")
      if input.strip.empty?
        @footer.say("Cloud limit is required")
        next
      end
      val = input.to_i
      if (0..100).include?(val)
        @cloudlimit = val
        break
      else
        @footer.say("Enter an integer 0–100")
      end
    end

    # 5) Humidity limit % {{{3
    loop do
      input = @footer.ask("Humidity limit %: ", "")
      if input.strip.empty?
        @footer.say("Humidity limit is required")
        next
      end
      val = input.to_i
      if (0..100).include?(val)
        @humiditylimit = val
        break
      else
        @footer.say("Enter an integer 0–100")
      end
    end

    # 6) Minimum temperature °C {{{3
    loop do
      input = @footer.ask("Min temperature °C: ", "")
      if input.strip.empty?
        @footer.say("Temperature limit is required")
        next
      end
      val = input.to_i
      if (-100..100).include?(val)
        @templimit = val
        break
      else
        @footer.say("Enter an integer between -100 and 100")
      end
    end

    # 7) Wind limit m/s {{{3
    loop do
      input = @footer.ask("Wind limit m/s: ", "")
      if input.strip.empty?
        @footer.say("Wind limit is required")
        next
      end
      val = input.to_i
      if (0..100).include?(val)
        @windlimit = val
        break
      else
        @footer.say("Enter an integer 0–100")
      end
    end

    # 8) Bortle scale (0.0–9.0) {{{3
    loop do
      input = @footer.ask("Bortle scale (0.0–9.0): ", "")
      if input.strip.empty?
        @footer.say("Bortle value is required")
        next
      end
      val = input.to_f
      if (0.0..9.0).include?(val)
        @bortle = val
        break
      else
        @footer.say("Enter a number between 0.0 and 9.0")
      end
    end
  end

  def load_or_ask_config # {{{2
    if File.exist?(CONFIG_FILE)
      content = File.read(CONFIG_FILE)
      if content.lines.any? { |l| l.strip.end_with?('=') }
        @footer.say("Incomplete config, reconfiguring…")
        ask_config
        save_config
        return
      end

      begin
        # Evaluate in this instance so @lat, @lon, etc. stick
        instance_eval(File.read(CONFIG_FILE), CONFIG_FILE)
      rescue SyntaxError => e
        @footer.say("Config syntax error, reconfiguring…")
        ask_config
        save_config
      end
    else
      ask_config
      save_config
    end
  end

  def save_config # {{{2
    File.write(CONFIG_FILE, <<~RUBY)
      @loc = "#{@loc}"
      @lat = #{@lat}
      @lon = #{@lon}
      @cloudlimit = #{@cloudlimit}
      @humiditylimit = #{@humiditylimit}
      @templimit = #{@templimit}
      @windlimit = #{@windlimit}
      @bortle = #{@bortle}
    RUBY
  end

  def setup_image_display # {{{2
    # allow override from ~/.ap.conf
    @w3mimgdisplay ||= "/usr/lib/w3m/w3mimgdisplay"
    @showimage     = File.executable?(@w3mimgdisplay)
  end

  def show_image(file=nil) # {{{2
    return unless @showimage

    begin
      # if anything in here takes longer than 2s, we skip it
      Timeout.timeout(2) do
        # grab window pixel dimensions
        info = `xwininfo -id $(xdotool getactivewindow) 2>/dev/null`
        return unless info =~ /Width:\s*(\d+).*Height:\s*(\d+)/m
        term_w, term_h = $1.to_i, $2.to_i

        # compute character‐cell size
        rows, cols = IO.console.winsize
        cw = term_w.to_f / cols
        ch = term_h.to_f / rows

        # top‐left pixel of the image
        px = ((@main.x - 1) * cw).to_i
        py = (24 * ch).to_i

        if file && File.exist?(file) && File.size(file) > 0
          # read & scale the image
          iw, ih = `identify -format "%wx%h" #{file}`.split('x').map(&:to_i)
          max_w = ((@main.w - 3) * cw).to_i
          max_h = ((rows - 26) * ch).to_i
          if iw > max_w
            ih = ih * max_w / iw; iw = max_w
          end
          if ih > max_h
            iw = iw * max_h / ih; ih = max_h
          end

          # Clear image area
          `echo "6;#{px};#{py};#{max_w};#{max_h};\n4;\n3;" | #{@w3mimgdisplay} 2>/dev/null`
          `echo "0;1;#{px};#{py};#{iw};#{ih};;;;;\"#{file}\"\n4;\n3;" | #{@w3mimgdisplay} 2>/dev/null`
        end
      end
    rescue Timeout::Error
      # silently skip if w3mimgdisplay/identify/xwininfo hangs
    end
  end

  def starchart # {{{2
    d   = @weather[@index][:date].split('-')[2]
    m   = @weather[@index][:date].split('-')[1]
    y   = @weather[@index][:date].split('-')[0]
    h   = @weather[@index][:hour].to_i
    url = [
      "https://www.stelvision.com/carte-ciel/visu_carte.php?",
      "stelmarq=C&mode_affichage=normal&req=stel",
      "&date_j_carte=#{d}",
      "&date_m_carte=#{m}",
      "&date_a_carte=#{y}",
      "&heure_h=#{h}&heure_m=00",
      "&longi=#{@lon}",
      "&lat=#{@lat}",
      "&tzone=#{@tz.to_i}",
      ".0&dst_offset=1&taille_carte=1200&fond_r=255&fond_v=255&fond_b=255&lang=en" 
    ].join

    png  = "/tmp/starchart.png"
    jpg  = "/tmp/starchart.jpg"

    # fetch + follow redirects
    if system("curl -fsSL -o #{Shellwords.escape(png)} '#{url}'")
      if File.size?(png).to_i > 0
        if system("convert #{Shellwords.escape(png)} #{Shellwords.escape(jpg)}")
          @current_image = jpg
          show_image(@current_image)
        else
          @footer.say("⚠️ convert failed")
        end
      else
        @footer.say("⚠️ empty starchart.png")
      end
    else
      @footer.say("⚠️ curl starchart failed")
    end
  end

  def apod # {{{2
    html = Net::HTTP.get(URI('https://apod.nasa.gov/apod/astropix.html'))
    img  = html[/IMG SRC="(.*?)"/,1]
    return @footer.say("⚠️ could not parse APOD URL") unless img

    full = "https://apod.nasa.gov/apod/#{img}"
    tmp  = "/tmp/apod.jpg"

    if system("curl -fsSL -o #{Shellwords.escape(tmp)} '#{full}'")
      if File.size?(tmp).to_i > 0
        @current_image = tmp
        show_image(@current_image)
      else
        @footer.say("⚠️ empty apod.jpg")
      end
    else
      @footer.say("⚠️ curl APOD failed")
    end
  end

  def setup_ui # {{{2
    # get current terminal size (rows, cols)
    rows, cols = IO.console.winsize

    # clear screen and hide cursor
    Rcurses.clear_screen
    Cursor.hide

    # create panes with actual dims
    @header = Pane.new(  1,    1,      cols,        1, 255, 236)
    @titles = Pane.new(  1,    2,      cols,        1, 255, 234)
    @left   = Pane.new(  2,    3,        70, rows - 3, 248, 232)
    @main   = Pane.new( 74,    3, cols - 74, rows - 4, 255, 232)
    @footer = Pane.new(  1, cols,      cols,        1, 255,  24)
  end

  def run_loop # {{{2
    fetch_all
    show_image(@current_image) if @current_image
    loop do
      draw_all
      handle_input
    end
  ensure
    save_config; Cursor.show; Rcurses.clear_screen
  end

  def fetch_all # {{{2
    now = Time.now
    @today = now.strftime("%F")
    @tz    = now.strftime("%z")[0..2]
    @time  = now.strftime("%H:%M")
    get_weather
    get_planets
    begin
      get_events
    rescue StandardError => e
      @footer.say("Events fetch failed: #{e.message}")
    end
    Thread.new { starchart if @lat > 23 }
    Thread.new { apod     if @lat <= 23 }
  end

  # Moon phase coloring {{{2
  # minimum moon‐gray so it never goes fully black:
  MOON_MIN = 0x22

  # phase in 0…100 → grayscale hex “RRGGBB” from #444444 up to #ffffff
  def moon_phase_color(phase)
    # linearly interpolate between MOON_MIN and 0xFF
    v = (MOON_MIN + ((0xFF - MOON_MIN) * (phase / 100.0))).round
    hex = "%02x" % v
    "#{hex}#{hex}#{hex}"
  end

  def cond_color(i) # {{{2
    level = get_cond(i)    # 1, 2 or 3
    COND_COLORS[level]
  end

  def draw_all # {{{2
    update_header; update_titles; update_footer; update_left; update_main
  end

  def update_header # {{{2
    body_list = BODIES.map { |b| SYMBOLS[b].fg(BODY_COLORS[b]) }.join(' ')
    _, cols = IO.console.winsize
    jd = DateTime.now.ajd + (Time.now.sec + Time.now.min*60 + Time.now.hour*3600)/86400.0
    txt = " YYYY-MM-DD  HH   Cld    Hum    Temp     Wind   ! #{body_list}      #{@loc} tz#{@tz} (#{@lat}/#{@lon})  Bortle #{@bortle}  Updated #{@time} JD:#{'%.5f' % jd}".b
    @header.clear
    @header.say(txt.ljust(cols))
  end

  # Update the top‐bar title line, safely handling missing planet data
  def update_titles
    _, cols = IO.console.winsize

    # Base limits display
    title  = "                 …#{@cloudlimit}%   …#{@humiditylimit}%    " \
             "#{@templimit}°C…   …#{@windlimit}m/s".fg(244)

    # Current date/hour
    if @weather[@index]
      date = @weather[@index][:date]
      hr   = @weather[@index][:hour]
      col  = cond_color(@index)
    else
      date = nil
      hr   = nil
      col  = 244
    end

    title << '     ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮      '.fg(244)
    title << "#{date}#{ date ? " (#{Date.parse(date).strftime("%A")}) #{hr}:00" : ""}".b.fg(col)

    # Safely fetch moon‐phase info (mphase/mph_s) if it exists
    if date && (pd = @planets[date])
      mp, mp_name = pd.values_at(:mphase, :mph_s)
      title << "  Moon: #{mp_name} (#{mp}%)".fg(244)
    else
      title << "  Moon: unavailable".fg(244)
    end

    @titles.clear
    @titles.say(title.ljust(cols))
  end

  def update_footer # {{{2
    _, cols = IO.console.winsize
    cmds = "?=Help l=Loc a=Lat o=Lon c=Cloud h=Hum t=Temp w=Wind b=Bortle " \
          "e=Events s=Starchart S=Open A=APOD r=Refresh W=Write q=Quit"
    @footer.clear
    @footer.say(cmds.ljust(cols))
  end

  # Redraw the left‐pane list of weather + visibility blocks,
  # Redraw the left‐pane list of weather + visibility blocks,
  # safely handling missing planet data and converting rise/set to integers
  def update_left
    date_o = ''
    date_n = ''

    all_lines = @weather.each_with_index.map do |w, i|
      col = cond_color(i)

      # Safely fetch planet data for this date (may be nil)
      pd = @planets[w[:date]] || {}
      mp = pd[:mphase]

      # Prepare date display, only show the date when it changes
      date_o = date_n
      date_n = w[:date]
      date_s = (date_n == date_o ? ' '.ljust(10) : date_n)

      # Fixed‐width weather columns
      hour_s  = w[:hour]
      cloud_s = "#{w[:cloud]}%".rjust(4)
      hum_s   = "#{w[:humidity]}%".rjust(5)
      tmp_s   = "#{w[:temp]}°C".rjust(6)
      wnd_s   = "#{w[:wind]}(#{w[:wdir]})".rjust(8)

      # Build the left‐pane row
      row  = "#{date_s}  ".fg(col)
      ul   = "#{hour_s}  #{cloud_s}  #{hum_s}  #{tmp_s}  #{wnd_s}".fg(col)
      ul   = ul.u if i == @index
      row += ul

      # Event marker
      if ev = @events[w[:date]] and ev[:time][0..1] == w[:hour]
        row += "  !".fg(col)
      else
        row += "   "
      end

      # Visibility blocks for Sun, Moon & planets
      BODIES.each_with_index do |b, j|
        # Extract just the hour component from rise/set, convert to Integer
        rise_h = pd[:"#{b}_rise"] ? pd[:"#{b}_rise"][0..1].to_i : nil
        set_h  = pd[:"#{b}_set"]  ? pd[:"#{b}_set"][0..1].to_i  : nil
        hr     = w[:hour].to_i

        above = if rise_h.nil? || set_h.nil?
                  false
                elsif rise_h > set_h
                  (hr >= rise_h) || (hr <= set_h)
                else
                  (hr >= rise_h) && (hr <= set_h)
                end

        # Choose block character and color
        block_char = (0..1) === j ? '█' : '┃'
        if above
          color = (b == 'moon' ? moon_phase_color(mp) : BODY_COLORS[b])
          block = block_char.fg(color)
        else
          block = ' '
        end

        row << " #{block}"
      end

      row
    end

    # Write into the pane buffer and center the selection
    @left.text = all_lines.join("\n")
    height    = @left.h

    top = @index - (height / 2)
    top = 0 if top < 0
    max_top = all_lines.size - height
    top = max_top if top > max_top

    @left.ix = top
    @left.refresh
  end

  def update_main # {{{2
    w    = @weather[@index]
    date = w[:date]
    hr   = w[:hour]

    buf = +""
    # 1) weather info in neutral grey
    buf << w[:info].fg(230) << "\n"

    # 2) ephemeris table
    if tbl = @planets.dig(date, :table)
      buf << tbl
    else
      buf << "No ephemeris data available for #{date}\n"
    end

    # 3) event, only if the selected row actually has the marker
    if ev = @events[date]
      buf << "\n"
      if ev[:time][0..1] == hr
        buf << "@ #{ev[:time]}: #{ev[:event]}".fg(cond_color(@index)) << "\n"
        buf << ev[:link].fg(cond_color(@index)) << "\n"
      else
        buf << "@ #{ev[:time]}: #{ev[:event]}\n"
        buf << "#{ev[:link]}\n"
      end
    end

    @main.clear
    @main.say(buf)
  end

  def show_all_events # {{{2
    # Show a full list of upcoming events in @main
    buf = +"Upcoming events:\n\n"
    # sort by date string, then by time
    @events.sort.each do |date, ev|
      buf << "#{date} #{ev[:time]}  #{ev[:event]}\n"
      buf << "  #{ev[:link]}\n\n"
    end
    @main.clear
    @main.say(buf)
    getchr
  end

  def refresh_all # {{{2
    Rcurses.clear_screen
    @header.full_refresh
    @left.full_refresh
    @main.full_refresh
    @footer.full_refresh
    show_image(@current_image) if @current_image
  end

  def handle_input # {{{2
    old_index = @index
    case getchr
    when 'UP'      then @index = (@index - 1) % @weather.size
    when 'DOWN'    then @index = (@index + 1) % @weather.size
    when 'PgUP'    then @index = [@index - @left.h, 0].max
    when 'PgDOWN'  then @index = [@index + @left.h, @weather.size - 1].min
    when 'HOME'    then @index = 0
    when 'END'     then @index = @weather.size - 1
    when '?'       then @main.say(HELP); getchr
    when 'l'       then @loc           = @footer.ask('Loc? ', @loc)
    when 'a'       then @lat           = @footer.ask('Lat? ', @lat.to_s).to_f
    when 'o'       then @lon           = @footer.ask('Lon? ', @lon.to_s).to_f
    when 'c'       then @cloudlimit    = @footer.ask('Maximum Cloud coverage? ', @cloudlimit.to_s).to_i
    when 'h'       then @humiditylimit = @footer.ask('Maximum Humidity? ', @humiditylimit.to_s).to_i
    when 't'       then @templimit     = @footer.ask('Minimum Temperature? ', @templimit.to_s).to_i
    when 'w'       then @windlimit     = @footer.ask('Maximum Wind? ', @windlimit.to_s).to_i
    when 'b'       then @bortle        = @footer.ask('Bortle? ', @bortle.to_s).to_f
    when 'e'       then show_all_events
    when 's'       then starchart
    when 'S'       then system("xdg-open /tmp/starchart.jpg &")
    when 'A'       then apod
    when 'r'       then refresh_all
    when 'R'       then fetch_all
    when 'W'       then save_config; @footer.say("Config saved"); getchr
    when 'q'       then exit
    end

    return if @index == old_index

    update_left
    update_main
  end

  # Fetch weather from met.no, but never let network errors crash the app
  def get_weather
    uri = URI("https://api.met.no/weatherapi/locationforecast/2.0/complete?lat=#{@lat}&lon=#{@lon}")
    req = Net::HTTP::Get.new(uri)
    req['User-Agent'] = 'astropanel/1.0 g@isene.com'

    begin
      res = Net::HTTP.start(uri.hostname, uri.port,
                            use_ssl: true,
                            read_timeout: 10) do |http|
        http.request(req)
      end
    rescue SocketError, Socket::ResolutionError, Timeout::Error, Net::OpenTimeout => e
      @footer.say("⚠️ Weather fetch failed: #{e.class}: #{e.message}")
      @weather = []
      return
    end

    if res.is_a?(Net::HTTPSuccess)
      series = JSON.parse(res.body)
                    .dig('properties','timeseries') || []
      @weather = series.map do |ts|
        det  = ts['data']['instant']['details']
        time = ts['time']
        date, hr = time[0..9], time[11..12]

        {
          date:     date,
          hour:     hr.rjust(2,'0'),
          cloud:    det['cloud_area_fraction'].to_i,
          humidity: det['relative_humidity'].to_i,
          temp:     det['air_temperature'].to_f.round(1),
          wind:     det['wind_speed'].to_f.round(1),
          wdir:     wind_dir(det['wind_from_direction'].to_i),
          info:     format_weather_info(det, date, hr)
        }
      end
    else
      @footer.say("⚠️ Weather API error: #{res.code} #{res.message}")
      @weather = []
    end
  end

  def format_weather_info(det,date,hr) # {{{2
    fog = det['fog_area_fraction']==0?'-':"#{det['fog_area_fraction']}%"
    <<~INFO
    Clouds:    #{det['cloud_area_fraction']}% (low/high #{det['cloud_area_fraction_low']}/#{det['cloud_area_fraction_high']})
    Humidity:  #{det['relative_humidity']}% (fog #{fog})
    Wind:      #{det['wind_speed']} m/s dir #{wind_dir(det['wind_from_direction'])} gusts #{det['wind_speed_of_gust']}
    Temp:      #{det['air_temperature']}°C (dew #{det['dew_point_temperature']}°C)
    Pressure:  #{det['air_pressure_at_sea_level']} hPa
    UV index:  #{det['ultraviolet_index_clear_sky'] rescue '-'}
    INFO
  end

  def wind_dir(d); %w[N NE E SE S SW W NW][(d/45)%8]; end # {{{2

  def get_cond(i) # {{{2
    # Return 1 (green), 2 (yellow), or 3 (red) for the row at index i
    w = @weather[i]
    return 1 unless w  # default green if out of range

    cond = 0
    # cloud
    cond += 1 if w[:cloud]       > @cloudlimit
    cond += 2 if w[:cloud]       > @cloudlimit + (100 - @cloudlimit)/2
    cond += 3 if w[:cloud]       > 90
    # humidity
    cond += 1 if w[:humidity]    > @humiditylimit
    # temperature
    cond += 1 if w[:temp]        < @templimit
    cond += 1 if w[:temp] + 7    < @templimit
    # wind
    cond += 1 if w[:wind]        > @windlimit
    cond += 1 if w[:wind]        > @windlimit * 2

    case cond
    when 0..1 then 1
    when 2..3 then 2
    else        3
    end
  end

  def get_planets # {{{2
    @planets.clear
    12.times do |i|
      date = (Date.today + i).strftime('%F')
      ep   = Ephemeris.new(date,@lat,@lon,@tz.to_i)
      entry = {
        table:  ep.print,
        mphase: ep.mphase,   # e.g. 67.4
        mph_s:  ep.mph_s     # e.g. "Waxing gibbous"
      }
      Ephemeris::BODY_ORDER.each do |b|
        arr = ep.send(b)
        entry[:"#{b}_rise"] = arr[5]
        entry[:"#{b}_set"]  = arr[7]
      end
      @planets[date] = entry
    end
  end


  def get_events # {{{2
    @events.clear
    uri = URI(
      "https://in-the-sky.org/rss.php?feed=dfan"\
      "&latitude=#{@lat}&longitude=#{@lon}&timezone=#{@loc}"
    )
    raw = Net::HTTP.get(uri)

    raw.scan(/<item>(.*?)<\/item>/m).each do |match|
      item = match.first

      # Extract title (contains date) safely
      title = item[/<title>(.*?)<\/title>/, 1]
      next unless title

      # The first word of the title is the date, e.g. "2025-05-07 ..."
      date_str = title.split.first
      begin
        date = Time.parse(date_str).strftime("%F")
      rescue ArgumentError
        next
      end

      # Only keep future events
      next if date < @today

      # Extract time and description
      time = item[/\d\d:\d\d:\d\d/, 0] || ""
      desc = item[/<description>&lt;p&gt;(.*?)&lt;\/p&gt;/, 1] || ""
      event = desc.decoder

      # Extract link
      link = item[/<link>(.*?)<\/link>/, 1] || ""

      @events[date] = { time: time, event: event, link: link }
    end
  end
end

# START PROGRAM {{{1
begin
  # a single quick DNS + TCP check
  TCPSocket.new('api.met.no', 443).close
rescue SocketError, Socket::ResolutionError => e
  $stderr.puts "FATAL: can’t resolve api.met.no – network appears down (#{e.message})"
  $stdin.cooked!
  $stdin.echo = true
  exit!
end

AstroPanelApp.new

# VIM MODELINE{{{1
# vim: set sw=2 sts=2 et fdm=marker fdn=2 fcs=fold\:\ : 
